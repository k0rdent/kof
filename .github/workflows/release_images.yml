name: "Release Docker Images"
on:
  push:
    tags:
      - "*"
    paths:
      - "kof-operator/**"
      - "docker/opentelemetry-collector-contrib/**"

jobs:
  build:
    concurrency:
      group: build-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    name: Build and Unit Test
    runs-on: ${{ github.repository_owner == 'k0rdent' && 'self-hosted' || 'ubuntu-latest' }}
    outputs:
      version: ${{ steps.vars.outputs.version }}
    permissions:
      packages: write
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "kof-operator/go.mod"
          cache: false
      - name: Unit tests
        working-directory: ./kof-operator
        run: |
          make test
      - name: Build web application
        working-directory: ./kof-operator
        run: make build-web-app
        # Creates `kof-operator/webapp/collector/dist`
        # which will be embedded at `docker/build-push-action` step.
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get outputs
        id: vars
        run: |
          GIT_VERSION=$(git describe --tags --always)
          echo "version=${GIT_VERSION}" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: goreleaser/goreleaser-action@v6
        with:
          version: "~> v2"
          args: release --clean --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_OPERATOR_REPO: ghcr.io/${{ github.repository }}/kof-operator-controller
          IMAGE_OTEL_COLLECTOR_REPO: ghcr.io/${{ github.repository }}/kof-opentelemetry-collector-contrib
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO_NAME: ${{ github.event.repository.name }}
          VERSION: ${{ steps.vars.outputs.version }}
