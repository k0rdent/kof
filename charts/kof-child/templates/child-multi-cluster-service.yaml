{{- $global := .Values.global | default dict }}
{{- $globalValues := dict }}
{{- $customRegistry := "" }}
{{- if $global.registry }}
  {{- $globalValues = printf `
global:
  registry: $R
  imageRegistry: $R
  image:
    registry: $R
  hub: $R/istio
grafana-operator:
  image:
    repository: $R/grafana/grafana-operator
external-dns:
  image:
    repository: $R/external-dns/external-dns
jaeger-operator:
  image:
    repository: $R/jaegertracing/jaeger-operator
opencost:
  opencost:
    exporter:
      image:
        registry: $R
    ui:
      image:
        registry: $R
opentelemetry-operator:
  manager:
    image:
      repository: $R/opentelemetry-operator/opentelemetry-operator
    collectorImage:
      repository: $R/otel/opentelemetry-collector-contrib
  kubeRBACProxy:
    image:
      repository: $R/brancz/kube-rbac-proxy
opentelemetry-kube-stack:
  defaultCRConfig:
    image:
      repository: $R/opentelemetry-collector-contrib
  cleanupJob:
    image:
      repository: $R/bitnami/kubectl

` | replace "$R" $global.registry | fromYaml }}
  {{- if ne $global.registry "docker.io" }}
    {{- $customRegistry = $global.registry }}
  {{- end }}
{{- end -}}
apiVersion: k0rdent.mirantis.com/v1beta1
kind: MultiClusterService
metadata:
  name: kof-child-cluster
spec:
  clusterSelector:
    matchLabels:
      k0rdent.mirantis.com/kof-cluster-role: child
    matchExpressions:
      - key: "k0rdent.mirantis.com/istio-role"
        operator: DoesNotExist

  serviceSpec:
    services:
      {{- $version := .Chart.Version | replace "." "-" }}

      {{- if (index .Values "cert-manager" "enabled") }}
      - name: cert-manager
        namespace: {{ .Release.Namespace }}
        template: {{ index .Values "cert-manager" "template" }}
        values: |
          crds:
            enabled: true
        {{- with $customRegistry }}
          image:
            repository: {{ . }}/jetstack/cert-manager-controller
          acmesolver:
            image:
              repository: {{ . }}/jetstack/cert-manager-acmesolver
          cainjector:
            image:
              repository: {{ . }}/jetstack/cert-manager-cainjector
          startupapicheck:
            image:
              repository: {{ . }}/jetstack/cert-manager-startupapicheck
          webhook:
            image:
              repository: {{ . }}/jetstack/cert-manager-webhook
        {{- end }}
      {{- end }}

      - name: kof-operators
        namespace: {{ .Release.Namespace }}
        template: kof-operators-{{ $version }}
        templateChain: kof-operators-{{ $version }}
        values: |
          {{`{{ $operatorsValuesFromAnnotation := index .Cluster.metadata.annotations "k0rdent.mirantis.com/kof-operators-values" | default "{}" | fromYaml }}`}}
          {{`{{`}} $operatorsValuesFromHelm := `{{ .Values.operators | toYaml | nindent 10 }}` | fromYaml {{`}}`}}
          {{`{{`}} $globalValuesFromHelm := `{{ $globalValues | toYaml | nindent 10 }}` | fromYaml {{`}}`}}
          {{`{{ mergeOverwrite (dict) $globalValuesFromHelm $operatorsValuesFromHelm $operatorsValuesFromAnnotation | toYaml | nindent 4 }}`}}

      - name: kof-collectors
        namespace: {{ .Release.Namespace }}
        template: kof-collectors-{{ $version }}
        templateChain: kof-collectors-{{ $version }}
        values: |
          {{`{{ $writeMetricsEndpoint := getField "ChildConfig" "data.write_metrics_endpoint" }}`}}
          {{`{{ $readMetricsEndpoint := getField "ChildConfig" "data.read_metrics_endpoint" }}`}}
          {{`{{ $logsEndpoint := getField "ChildConfig" "data.write_logs_endpoint" }}`}}
          {{`{{ $tracesEndpoint := getField "ChildConfig" "data.write_traces_endpoint" }}`}}
          {{`{{ $collectorsValuesFromAnnotation := index .Cluster.metadata.annotations "k0rdent.mirantis.com/kof-collectors-values" | default "{}" | fromYaml }}`}}
          {{`{{`}} $collectorsValuesFromHelm := `{{ .Values.collectors | toYaml | nindent 10 }}` | fromYaml {{`}}`}}
          {{`{{`}} $collectorsValuesHere := `
          global:
            clusterName: {childClusterName}
            clusterNamespace: {childClusterNamespace}
          opentelemetry-kube-stack:
            clusterName: {childClusterName}
            defaultCRConfig:
              env:
                - name: KOF_VM_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: storage-vmuser-credentials
                - name: KOF_VM_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: storage-vmuser-credentials
                - name: KOF_JAEGER_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: jaeger-credentials
                - name: KOF_JAEGER_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: jaeger-credentials
              config:
                processors:
                  resource/k8sclustername:
                    attributes:
                    - action: insert
                      key: k8s.cluster.name
                      value: {childClusterName}
                    - action: insert
                      key: k8s.cluster.namespace
                      value: {childClusterNamespace}
                extensions:
                  basicauth/logs:
                    client_auth:
                      username: ${env:KOF_VM_USER}
                      password: ${env:KOF_VM_PASSWORD}
                  basicauth/metrics:
                    client_auth:
                      username: ${env:KOF_VM_USER}
                      password: ${env:KOF_VM_PASSWORD}
                  basicauth/traces:
                    client_auth:
                      username: ${env:KOF_JAEGER_USER}
                      password: ${env:KOF_JAEGER_PASSWORD}
                exporters:
                  debug: {}
                  otlphttp/traces:
                    endpoint: {tracesEndpoint}
                    auth:
                      authenticator: basicauth/traces
                  otlphttp/logs:
                    auth:
                      authenticator: basicauth/logs
                    logs_endpoint: {logsEndpoint}
                  prometheusremotewrite:
                    external_labels:
                      cluster: {childClusterName}
                      clusterNamespace: {childClusterNamespace}
                    auth:
                      authenticator: basicauth/metrics
                    endpoint: {writeMetricsEndpoint}
                service:
                  extensions:
                  - basicauth/metrics
                  - basicauth/logs
                  - basicauth/traces
          opencost:
            opencost:
              prometheus:
                external:
                  url: {readMetricsEndpoint}
              exporter:
                defaultClusterId: {childClusterName}
          ` | replace "{childClusterName}" .Cluster.metadata.name | replace "{childClusterNamespace}" .Cluster.metadata.namespace | replace "{tracesEndpoint}" $tracesEndpoint | replace "{logsEndpoint}" $logsEndpoint | replace "{writeMetricsEndpoint}" $writeMetricsEndpoint | replace "{readMetricsEndpoint}" $readMetricsEndpoint | fromYaml {{`}}`}}
          {{`{{`}} $globalValuesFromHelm := `{{ $globalValues | toYaml | nindent 10 }}` | fromYaml {{`}}`}}
          {{`{{ mergeOverwrite (dict) $globalValuesFromHelm $collectorsValuesHere $collectorsValuesFromHelm $collectorsValuesFromAnnotation | toYaml | nindent 4 }}`}}
    templateResourceRefs:
    - identifier: ChildConfig
      resource:
        apiVersion: v1
        kind: ConfigMap
        name: kof-cluster-config-{{`{{ .Cluster.metadata.name }}`}}
        namespace: "{{`{{ .Cluster.metadata.namespace }}`}}"
    - identifier: ChildKCMCluster
      optional: true
      resource:
        apiVersion: cluster.x-k8s.io/v1beta1
        kind: Cluster
        name: "{{`{{ .Cluster.metadata.name }}`}}"
        namespace: "{{`{{ .Cluster.metadata.namespace }}`}}"
    - identifier: ChildSveltosCluster
      optional: true
      resource:
        apiVersion: lib.projectsveltos.io/v1beta1
        kind: SveltosCluster
        name: "{{`{{ .Cluster.metadata.name }}`}}"
        namespace: "{{`{{ .Cluster.metadata.namespace }}`}}"
